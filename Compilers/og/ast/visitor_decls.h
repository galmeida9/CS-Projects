// **** AUTOMATICALLY GENERATED BY mk-visitor-decls.pl -- DO NOT EDIT ****
#include <cdk/ast/visitor_decls.h>

#ifdef __IN_VISITOR_HEADER__

#ifdef __PURE_VIRTUAL_DECLARATIONS_ONLY__

  virtual void do_address_of_node(og::address_of_node *const node, int lvl) = 0;
  virtual void do_block_node(og::block_node *const node, int lvl) = 0;
  virtual void do_break_node(og::break_node *const node, int lvl) = 0;
  virtual void do_continue_node(og::continue_node *const node, int lvl) = 0;
  virtual void do_evaluation_node(og::evaluation_node *const node, int lvl) = 0;
  virtual void do_for_node(og::for_node *const node, int lvl) = 0;
  virtual void do_function_call_node(og::function_call_node *const node, int lvl) = 0;
  virtual void do_function_declaration_node(og::function_declaration_node *const node, int lvl) = 0;
  virtual void do_function_definition_node(og::function_definition_node *const node, int lvl) = 0;
  virtual void do_identity_node(og::identity_node *const node, int lvl) = 0;
  virtual void do_if_else_node(og::if_else_node *const node, int lvl) = 0;
  virtual void do_if_node(og::if_node *const node, int lvl) = 0;
  virtual void do_index_node(og::index_node *const node, int lvl) = 0;
  virtual void do_nullptr_node(og::nullptr_node *const node, int lvl) = 0;
  virtual void do_print_node(og::print_node *const node, int lvl) = 0;
  virtual void do_read_node(og::read_node *const node, int lvl) = 0;
  virtual void do_return_node(og::return_node *const node, int lvl) = 0;
  virtual void do_sizeof_node(og::sizeof_node *const node, int lvl) = 0;
  virtual void do_stack_alloc_node(og::stack_alloc_node *const node, int lvl) = 0;
  virtual void do_tuple_index_node(og::tuple_index_node *const node, int lvl) = 0;
  virtual void do_tuple_node(og::tuple_node *const node, int lvl) = 0;
  virtual void do_variable_declaration_node(og::variable_declaration_node *const node, int lvl) = 0;


#else

  void do_address_of_node(og::address_of_node *const node, int lvl);
  void do_block_node(og::block_node *const node, int lvl);
  void do_break_node(og::break_node *const node, int lvl);
  void do_continue_node(og::continue_node *const node, int lvl);
  void do_evaluation_node(og::evaluation_node *const node, int lvl);
  void do_for_node(og::for_node *const node, int lvl);
  void do_function_call_node(og::function_call_node *const node, int lvl);
  void do_function_declaration_node(og::function_declaration_node *const node, int lvl);
  void do_function_definition_node(og::function_definition_node *const node, int lvl);
  void do_identity_node(og::identity_node *const node, int lvl);
  void do_if_else_node(og::if_else_node *const node, int lvl);
  void do_if_node(og::if_node *const node, int lvl);
  void do_index_node(og::index_node *const node, int lvl);
  void do_nullptr_node(og::nullptr_node *const node, int lvl);
  void do_print_node(og::print_node *const node, int lvl);
  void do_read_node(og::read_node *const node, int lvl);
  void do_return_node(og::return_node *const node, int lvl);
  void do_sizeof_node(og::sizeof_node *const node, int lvl);
  void do_stack_alloc_node(og::stack_alloc_node *const node, int lvl);
  void do_tuple_index_node(og::tuple_index_node *const node, int lvl);
  void do_tuple_node(og::tuple_node *const node, int lvl);
  void do_variable_declaration_node(og::variable_declaration_node *const node, int lvl);


#endif /* !defined(__PURE_VIRTUAL_DECLARATIONS_ONLY__) */

#endif /* __IN_VISITOR_HEADER__ */
